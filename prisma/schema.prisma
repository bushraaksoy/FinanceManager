generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  OTHER
}

enum IncomeCategory {
  SALARY
  ALLOWANCE
  COMMISSION
  INVESTMENT
  INTEREST
  ROYALTY
  FREELANCE
  OTHER
}

enum ExpenseCategory {
  HOUSING
  TRANSPORT
  HEALTH
  GROCERIES
  FOOD
  SHOPPING
  INSURANCE
  ENTERTAINMENT
  SUBSCRIPTION
  OTHER
}

enum NotificationType {
  REMINDER
  ALERT
}

model User {
  id                 String               @id @default(uuid())
  username           String               @unique
  email              String?              @unique
  fullname           String?
  password           String
  avatar             String?
  dob                DateTime?
  gender             String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  incomes            Income[]
  expenses           Expense[]
  savings            Saving[]
  notifications      Notification[]
  SurveyData         SurveyData[]
  TransactionHistory TransactionHistory[]
}

model Income {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String?
  amount             Float
  frequency          Frequency?
  date               DateTime?
  category           IncomeCategory?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  TransactionHistory TransactionHistory[]
}

model Expense {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String?
  amount             Float
  frequency          Frequency?
  date               DateTime?
  category           ExpenseCategory?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  TransactionHistory TransactionHistory[]
}

model Saving {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String?
  targetAmount       Float
  savedAmount        Float?
  monthlySaving      Float?
  dueDate            DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  TransactionHistory TransactionHistory[]
}

enum TransactionType {
  SAVING
  EXPENSE
}

model TransactionHistory {
  id        Int             @id @default(autoincrement())
  amount    Float
  type      TransactionType
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  expenseId Int?
  expense   Expense?        @relation(fields: [expenseId], references: [id])
  savingId  Int?
  saving    Saving?         @relation(fields: [savingId], references: [id])
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  incomeId  Int
  income    Income          @relation(fields: [incomeId], references: [id])
  // TODO: Do we add a title to our transaction??? the bank statemnet and so on
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  time      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRead    Boolean
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model SurveyData {
  user                  User               @relation(fields: [userId], references: [id])
  userId                String             @id
  monthlyIncome         Float?
  financialLiteracy     FinancialLiteracy?
  maxSpending           ExpenseCategory?
  // expenses / subscriptions
  avgMonthlySpending    Float?
  monthlySaving         Float?
  financialGoalPriority String? // Enum??
  importantAppFeature   String? // Enum??
}

enum FinancialLiteracy {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

//! SUBSCRIPTIONS!? UPCOMING PAYMENTS!?
// TODO: work on varrying monthly income
// How should i implement the concept of subscriptions? 
